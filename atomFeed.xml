<?xml version="1.0" encoding="utf-8"?>
	<feed xmlns="http://www.w3.org/2005/Atom">
	
	  <title>Ben</title>
	  <link href="https://wussell.github.io/atomFeed.xml"/>
	  <updated>2020-05-14T16:24:21-04:00</updated>
	  <author>
		<name>Ben Muthalaly</name>
	  </author>
	  <id>https://wussell.github.io/</id>
	
	  <entry>
		<title>4-4-20</title>
		<link href="https://wussell.github.io/4_4_20.html"/>
		<id>https://wussell.github.io/4_4_20.html</id>
		<updated>2020-05-14T16:24:21-04:00</updated>
	  </entry>

 	 <entry>
		<title>4-19-20</title>
		<link href="https://wussell.github.io/4_19_20.html"/>
		<id>https://wussell.github.io/4_19_20.html</id>
		<updated>2020-05-17T13:05:50-04:00</updated>
	  </entry>
	   
     <entry>
		<title>4-21-20</title>
		<link href="https://wussell.github.io/4_21_20.html"/>
		<id>https://wussell.github.io/4_21_20.html</id>
		<updated>2020-05-17T15:41:18-04:00</updated>
	  </entry>
 
		<entry>
		<title>4-22-20</title>
		<link href="https://wussell.github.io/4_22_20.html"/>
		<id>https://wussell.github.io/4_22_20.html</id>
		<updated>2020-05-18T12:24:15-04:00</updated>
	  </entry>
 
		<entry>
		<title>5-18-20test</title>
		<link href="https://wussell.github.io/5_18_20test"/>
		<id>https://wussell.github.io/5_18_20test</id>
		<updated>2020-05-19T16:18:13-04:00</updated>
	  	<content>
		  <![CDATA[
<p>
Atom feed

</p>  
<p>
Got command line input for the update function working with the scanln function in the fmt package. Learned a little about the Chomsky hierarchy and that you can't parse context free languages with regular expressions (?) while trying to investigate why stripping the tags from an html file was more difficult than I expected. Decided to change my approach from taking relevant parts out of the html file to creating an Atom entry and html file from a plain text file.

</p> 
<p>
To do:

</p>  
<p>
Automate git commit and push. Implement different functionality for updating an existing entry and for entirely new entries. Implement delete entry function. Add textual content of given file to entries.
</p>  
]]>

</content>
	 </entry>
	   
		<entry>
		<title>5-19-20test</title>
		<link href="https://wussell.github.io/5_19_20test"/>
		<id>https://wussell.github.io/5_19_20test</id>
		<updated>2020-05-19T16:40:34-04:00</updated>
		  <content>
		  <![CDATA[
		  <p>
will line breaks ever work

</p> 
 <p>
probably not. this is stupid

</p> 
<p> 
maybe it isn't working because you can't update a post in netnewswire

</p> 
 <p>
i hope not. that would be stupid</p> 
 ]]>
	</content>
	 </entry>
	   
		<entry>
		<title>5-19-20</title>
		<link href="https://wussell.github.io/5_19_20"/>
		<id>https://wussell.github.io/5_19_20</id>
		<updated>2020-05-19T16:56:33-04:00</updated>
		  <content>
		  <![CDATA[
		  <p>
Atom Feed:

</p> 
 <p>
Got it working with the new approach. Pretty simple overall, but I was still slow working out the minor bugs. But it's been the most productive day I had in a while. And this may be the first program I've written that makes my life slightly more convenient. Yay! Also, I don't think NetNewsWire updates unless an entry with a new id is added. I kept trying to add whitespace to the content on one post but nothing changed until I added a new post. Good to know.

</p> 
<p>
to do: 

</p> 
 <p>
Maybe reset the feed and build it back from the beginning so every post in the feed is formatted the same way. Change the keywords so that they're not normal words. Maybe add extra formatting to make each entry prettier? Automate git commit and push. Implement different functionality for updating an existing entry and for entirely new entries. Implement delete entry function.</p> 
 ]]>
	</content>
	 </entry>
	   
		<entry>
		<title>5-20-20</title>
		<link href="https://wussell.github.io/5_20_20"/>
		<id>https://wussell.github.io/5_20_20</id>
		<updated>2020-05-20T17:02:07-04:00</updated>
		  <content>
		  <![CDATA[
		  <p>
Huffman coding:

</p> 
 <p>
Finally got the bit sequence table working, with a lot of help. I don't think I would have been able to come up with the function I ended up using by myself. It would probably help to go through it again a few times to solidify the details. Now I'm working on the actual compressing of the file. It's fairly straightforward, but I do need to get a lot more comfortable with how Go stores and displays values, especially numbers in various bases. Hopefully I can finish the file compression tomorrow, and the decompression soon after.

</p> 
<p>
to do: 

</p> 
 <p>
File compression (including header and pseudo-eof), decompression, and testing.</p> 
 ]]>
	</content>
	 </entry>
	  
	</feed>